version: 2.1

workflows:
    build-test-deploy:
        jobs:
            - checkout:
                filters:
                    branches:
                        only:
                            - master
                            - release
                            - development
                            - feature-github-release

            - dependencies_backend:
                requires:
                    - checkout
            - dependencies_frontend:
                requires:
                    - checkout

            - build_backend:
                requires:
                    - dependencies_backend
            - build_frontend:
                requires:
                    - dependencies_frontend

            - test_backend:
                requires:
                    - build_backend
            - lint_frontend:
                requires:
                    - build_frontend
            - test_frontend:
                requires:
                    - build_frontend

            - sonarqube:
                context:
                    kwetter
                requires:
                    - test_backend
                    - test_frontend
                    - lint_frontend

            - approval:
                type: approval
                requires:
                    - sonarqube     

            - docker_backend:
                context:
                    kwetter
                requires:
                    - approval

            - docker_frontend:
                context:
                    kwetter
                requires:
                    - approval

            - github-release:
                context:
                    kwetter
                requires:
                    - sonarqube
                filters:
                    branches:
                        only:
                            - master
                            - feature-github-release

executors:
    python:
        docker:
            - image: python

    java:
        docker:
            - image: circleci/openjdk:8-jdk
        environment:
            MAVEN_OPTS: -Xmx3200m
            SOURCE_PATH: kwetter_backend

    node:
        docker:
            - image: circleci/node:10.15.3
        environment:
            SOURCE_PATH: kwetter_angular
    
    go:
        docker:
            # 'Go' docker image with ghr pre-installed
            - image: cibuilds/github:0.10

commands:
    skip:
        steps:
            - run:
                name: Skip
                command: ls

    version_to_environment:
        steps:
            - run:
                name: Setup Kwetter Version Environment Variable
                command: echo "export KWETTER_VERSION="$(tail version.txt)"" >> $BASH_ENV

    attach_workspace_all:
        steps:
            - attach_workspace:
                at: .

    persist_workspace_angular_after_checkout:
        steps:
            - persist_to_workspace:
                root: .
                paths:
                    - kwetter_angular

    persist_workspace_angular_after_build:
        steps:
            - persist_to_workspace:
                root: .
                paths:
                    - kwetter_angular/dist

    persist_workspace_backend_after_checkout:
        steps:
            - persist_to_workspace:
                root: .
                paths:
                    - kwetter_backend

    persist_workspace_backend_after_build_and_tests:
        steps:
            - persist_to_workspace:
                root: .
                paths:
                    - version.txt
                    - kwetter_backend/target

    run_docker:
        parameters:
            user:
                type: string
                default: .
            pass:
                type: string
                default: .
            source:
                type: string
                default: .
            tag:
                type: string
                default: .
            version:
                type: string
                default: .
        steps:
            - run:
                name: Docker Login
                command: docker login -u << parameters.user >> -p << parameters.pass >>
            - run:
                name: Docker Build
                command: docker build -t << parameters.user >>/<< parameters.source >>:<< parameters.tag >>-<< parameters.version >> ./<< parameters.source >>
            - run:
                name: Docker Push
                command: docker push << parameters.user >>/<< parameters.source >>:<< parameters.tag >>-<< parameters.version >>
            - run:
                name: Docker Build Latest
                command: docker build -t << parameters.user >>/<< parameters.source >>:<< parameters.tag >>-latest ./<< parameters.source >>
            - run:
                name: Docker Push Latest
                command: docker push << parameters.user >>/<< parameters.source >>:<< parameters.tag >>-latest

    restore_cache_backend:
        steps:
            - restore_cache:
                keys:
                    - maven-v4-{{ checksum "kwetter_backend/pom.xml" }}
                    - maven-v4-

    restore_cache_angular:
        steps:
            - restore_cache:
                keys:
                    - node-v6-{{ checksum "kwetter_angular/package.json" }}
                    - node-v6-

    save_cache_backend:
        steps:
            - save_cache:
                paths:
                    - ~/.m2
                key: maven-v4-{{ checksum "kwetter_backend/pom.xml" }}

    save_cache_angular:
        steps:
            - save_cache:
                paths:
                    - kwetter_angular/node_modules
                key: node-v6-{{ checksum "kwetter_angular/package.json" }}

jobs:
    checkout:
        executor: python
        steps:
            - checkout
            - persist_workspace_angular_after_checkout
            - persist_workspace_backend_after_checkout

    dependencies_backend:
        executor: java
        steps:
            - attach_workspace_all
            - restore_cache_backend
            - run:
                name: Maven Go-Offline
                command: cd $SOURCE_PATH && mvn dependency:go-offline
            - save_cache_backend
            # Dont persist dependencies they are loaded via the cache

    dependencies_frontend:
        executor: node
        steps:
            - attach_workspace_all
            - restore_cache_angular
            - run:
                name: Install dependencies
                command: cd $SOURCE_PATH && npm install
            - save_cache_angular
            # Dont persist dependencies they are loaded via the cache

    build_backend:
        executor: java
        steps:
            - attach_workspace_all
            - restore_cache_backend
            - run:
                name: Build Backend
                command: cd $SOURCE_PATH && mvn install -DskipTests
            - run:
                name: Save Kwetter version to file
                command: cd $SOURCE_PATH && echo "$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec 2>/dev/null)" >> ../version.txt
            - persist_workspace_backend_after_build_and_tests

    build_frontend:
        executor: node
        steps:
            - attach_workspace_all
            - restore_cache_angular
            - run:
                name: Build Frontend
                command: cd $SOURCE_PATH && npm run build
            - persist_workspace_angular_after_build

    test_backend:
        executor: java
        steps:
            - attach_workspace_all
            - restore_cache_backend
            - run:
                name: Test Backend
                command: cd $SOURCE_PATH && mvn test
            - persist_workspace_backend_after_build_and_tests

    lint_frontend:
        executor: node
        steps:
            - attach_workspace_all
            - restore_cache_angular
            - run:
                name: Linting
                command: cd $SOURCE_PATH && npm run lint

    test_frontend:
        executor: node
        steps:
            - skip
            # - attach_workspace_all
            # Disabled for testing purposes
            # - run:
            #     name: Testing
            #     command: cd $SOURCE_PATH && npm run test

    sonarqube:
        executor: java
        steps:
            - attach_workspace_all
            - restore_cache_backend
            - run:
                command: |
                    cd $SOURCE_PATH
                    mvn sonar:sonar \
                    -Dsonar.projectKey=kwetter \
                    -Dsonar.organization=ronaldvandenbroek-github \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.login=$SONAR_LOGIN

    docker_backend:
        machine: true
        environment:
            SOURCE_PATH: kwetter_backend
        steps:
            - attach_workspace_all
            - version_to_environment
            - run_docker:
                user: "${DOCKER_USER}"
                pass: "${DOCKER_PASS}"
                source: "${SOURCE_PATH}"
                version: "${KWETTER_VERSION}"
                tag: "${CIRCLE_BRANCH}"

    docker_frontend:
        machine: true
        environment:
            SOURCE_PATH: kwetter_angular
        steps:
            - attach_workspace_all
            - version_to_environment
            - run_docker:
                user: "${DOCKER_USER}"
                pass: "${DOCKER_PASS}"
                source: "${SOURCE_PATH}"
                version: "${KWETTER_VERSION}"
                tag: "${CIRCLE_BRANCH}"

    github-release:
        executor: go
        steps:
            - attach_workspace_all
            - run:
                name: Create the artifacts folder
                command: mkdir /artifacts
            - run:
                name: Copy the java binary to artifacts
                command: cd kwetter_backend/target && cp kwetter-1.0.jar ../../artifacts
            - run:
                name: Copy the angular dist to artifacts
                command: cd kwetter_backend/target && ls && cp * ../../artifacts
            - run:
                name: Test artifact copy
                command: cd artifacts && ls

            # - run:
            #     name: "Publish Release on GitHub"
            #     command: |
            #         VERSION=$(my-binary --version)
            #         ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/
