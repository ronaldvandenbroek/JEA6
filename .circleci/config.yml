version: 2.1

workflows:
    build-test-deploy:
        jobs:
            # Checkout the code from github
            - checkout
            # Load the dependancies from cache and update if nessesary
            - dependencies_backend:
                requires:
                    - checkout
            - dependencies_frontend:
                requires:
                    - checkout
            # Build the applications
            - build_backend:
                requires:
                    - dependencies_backend
            - build_frontend:
                requires:
                    - dependencies_frontend
            # Test the applications
            - test_backend:
                requires:
                    - build_backend
            - lint_frontend:
                requires:
                    - build_frontend
            - test_frontend:
                requires:
                    - build_frontend
            - sonarqube:
                context:
                    kwetter
                requires:
                    - test_backend
                    - test_frontend
                    - lint_frontend
            # Archive code on github on a release from master branch or a prerelease from release branch
            - github: # Release
                context:
                    kwetter
                requires:
                    - sonarqube
                filters:
                    branches:
                        only:
                            - master
                            - release
                            - development
            # Docker deployment for every OTAP environment
            - docker_testing: # Testing
                tag: testing
                context:
                    kwetter
                requires:
                    - sonarqube
                filters:
                    branches:
                        only:
                            - master
                            - release
                            - development

executors:
    python:
        docker:
            - image: python
    java:
        docker:
            - image: circleci/openjdk:8-jdk
        environment:
            MAVEN_OPTS: -Xmx3200m
            SOURCE_PATH: kwetter_backend
    node:
        docker:
            - image: circleci/node:10.15.3
        environment:
            SOURCE_PATH: kwetter_angular
    go:
        docker:
            # 'Go' docker image with ghr pre-installed
            - image: cibuilds/github:0.10

commands:
    skip:
        steps:
            - run:
                name: Skip
                command: ls
    version_to_environment:
        steps:
            - run:
                name: Setup Kwetter Version Environment Variable
                command: echo "export KWETTER_VERSION="$(tail version.txt)"" >> $BASH_ENV
    is_release_to_environment:
        steps:
            - run:
                name: Setup Kwetter Check if Testing release
                command: echo "export IS_RELEASE="$([ -e /release.txt ])"" >> $BASH_ENV
    end_job_if_not_release:
        steps:
            - run:
                name: Check if job is a release otherwise end
                command: if [ -e /release.txt ]; then circleci step halt; fi         
    attach_workspace_all:
        steps:
            - attach_workspace:
                at: .
    persist_workspace_angular_after_checkout:
        steps:
            - persist_to_workspace:
                root: .
                paths:
                    - kwetter_angular
    persist_workspace_angular_after_build:
        steps:
            - persist_to_workspace:
                root: .
                paths:
                    - kwetter_angular/dist
    persist_workspace_backend_after_checkout:
        steps:
            - persist_to_workspace:
                root: .
                paths:
                    - kwetter_backend
    persist_workspace_backend_after_build_and_tests:
        steps:
            - persist_to_workspace:
                root: .
                paths:
                    - version.txt
                    - kwetter_backend/target
    docker_build_and_deploy:
        parameters:
            user:
                type: string
            pass:
                type: string
            source_backend:
                type: string
            source_frontend:
                type: string
            tag:
                type: string
            version:
                type: string
        steps:
            - docker_login:
                user: "<< parameters.user >>"
                pass: "<< parameters.pass >>"
            - docker_build_and_push:
                user: "<< parameters.user >>"
                source: "<< parameters.source_frontend >>"
                version: "<< parameters.version >>"
                tag: "<< parameters.tag >>"
            - docker_build_and_push:
                user: "<< parameters.user >>"
                source: "<< parameters.source_frontend >>"
                version: latest
                tag: "<< parameters.tag >>"
            - docker_build_and_push:
                user: "<< parameters.user >>"
                source: "<< parameters.source_backend >>"
                version: "<< parameters.version >>"
                tag: "<< parameters.tag >>"
            - docker_build_and_push:
                user: "<< parameters.user >>"
                source: "<< parameters.source_backend >>"
                version: latest
                tag: "<< parameters.tag >>"
    docker_rename_and_deploy:
        parameters:
            user:
                type: string
            pass:
                type: string
            source_backend:
                type: string
            source_frontend:
                type: string
            old-tag:
                type: string
            new-tag:
                type: string  
            version:
                type: string
        steps:
            - docker_login:
                user: "<< parameters.user >>"
                pass: "<< parameters.pass >>"
            - docker_pull_rename_and_push:
                user: "<< parameters.user >>"
                source: "<< parameters.source_frontend >>"
                version: "<< parameters.version >>"
                old-tag: "<< parameters.old-tag >>"
                new-tag: "<< parameters.new-tag >>"
            - docker_pull_rename_and_push:
                user: "<< parameters.user >>"
                source: "<< parameters.source_frontend >>"
                version: latest
                old-tag: "<< parameters.old-tag >>"
                new-tag: "<< parameters.new-tag >>"
            - docker_pull_rename_and_push:
                user: "<< parameters.user >>"
                source: "<< parameters.source_backend >>"
                version: "<< parameters.version >>"
                old-tag: "<< parameters.old-tag >>"
                new-tag: "<< parameters.new-tag >>"
            - docker_pull_rename_and_push:
                user: "<< parameters.user >>"
                source: "<< parameters.source_backend >>"
                version: latest
                old-tag: "<< parameters.old-tag >>"
                new-tag: "<< parameters.new-tag >>"           
    docker_login:
        parameters:
            user:
                type: string
            pass:
                type: string
        steps:
            - run:
                name: Docker Login
                command: docker login -u << parameters.user >> -p << parameters.pass >>
    docker_build_and_push:
        parameters:
            user:
                type: string
            source:
                type: string
            tag:
                type: string
            version:
                type: string
        steps:
            - run:
                name: Docker Build
                command: docker build -t << parameters.user >>/<< parameters.source >>:<< parameters.tag >>-<< parameters.version >> ./<< parameters.source >>          
            - run:
                name: Docker Push
                command: docker push << parameters.user >>/<< parameters.source >>:<< parameters.tag >>-<< parameters.version >>
    docker_pull_rename_and_push:
        parameters:
            user:
                type: string
            source:
                type: string
            old-tag:
                type: string
            new-tag:
                type: string                
            version:
                type: string
        steps:
            - run:
                name: Docker Pull
                command: docker pull << parameters.user >>/<< parameters.source >>:<< parameters.old-tag >>-<< parameters.version >>
            - run:
                name: Docker Rename
                command: |
                    docker tag \
                    << parameters.user >>/<< parameters.source >>:<< parameters.old-tag >>-<< parameters.version >> \
                    << parameters.user >>/<< parameters.source >>:<< parameters.new-tag >>-<< parameters.version >>
            - run:
                name: Docker Push
                command: docker push << parameters.user >>/<< parameters.source >>:<< parameters.new-tag >>-<< parameters.version >>
    restore_cache_backend:
        steps:
            - restore_cache:
                keys:
                    - maven-v4-{{ checksum "kwetter_backend/pom.xml" }}
                    - maven-v4-
    restore_cache_angular:
        steps:
            - restore_cache:
                keys:
                    - node-v6-{{ checksum "kwetter_angular/package.json" }}
                    - node-v6-
    save_cache_backend:
        steps:
            - save_cache:
                paths:
                    - ~/.m2
                key: maven-v4-{{ checksum "kwetter_backend/pom.xml" }}
    save_cache_angular:
        steps:
            - save_cache:
                paths:
                    - kwetter_angular/node_modules
                key: node-v6-{{ checksum "kwetter_angular/package.json" }}

jobs:
    checkout:
        executor: python
        steps:
            - checkout
            - persist_workspace_angular_after_checkout
            - persist_workspace_backend_after_checkout
    dependencies_backend: 
        executor: java
        steps:
            - attach_workspace_all
            - restore_cache_backend
            - run:
                name: Maven Go-Offline
                command: cd $SOURCE_PATH && mvn dependency:go-offline
            - save_cache_backend
            # Dont persist dependencies they are loaded via the cache
    dependencies_frontend:
        executor: node
        steps:
            - attach_workspace_all
            - restore_cache_angular
            - run:
                name: Install dependencies
                command: cd $SOURCE_PATH && npm install
            - save_cache_angular
            # Dont persist dependencies they are loaded via the cache
    build_backend:
        executor: java
        steps:
            - attach_workspace_all
            - restore_cache_backend
            - run:
                name: Build Backend
                command: cd $SOURCE_PATH && mvn install -DskipTests
            - run:
                name: Save Kwetter version to file
                command: cd $SOURCE_PATH && echo "$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec 2>/dev/null)" >> ../version.txt
            - persist_workspace_backend_after_build_and_tests
    build_frontend:
        executor: node
        steps:
            - attach_workspace_all
            - restore_cache_angular
            - run:
                name: Build Frontend
                command: cd $SOURCE_PATH && npm run build
            - persist_workspace_angular_after_build
    test_backend:
        executor: java
        steps:
            - attach_workspace_all
            - restore_cache_backend
            - run:
                name: Test Backend
                command: cd $SOURCE_PATH && mvn test
            - persist_workspace_backend_after_build_and_tests
    lint_frontend:
        executor: node
        steps:
            - attach_workspace_all
            - restore_cache_angular
            - run:
                name: Linting
                command: cd $SOURCE_PATH && npm run lint
            - store_test_results:
                path: test-results/lint_frontend
    test_frontend:
        executor: node
        steps:
            - skip
            # - attach_workspace_all
            # Disabled for testing purposes
            # - run:
            #     name: Testing
            #     command: cd $SOURCE_PATH && npm run test
    sonarqube:
        executor: java
        steps:
            - attach_workspace_all
            - restore_cache_backend
            - run:
                command: |
                    cd $SOURCE_PATH
                    mvn sonar:sonar \
                    -Dsonar.projectKey=kwetter \
                    -Dsonar.organization=ronaldvandenbroek-github \
                    -Dsonar.host.url=https://sonarcloud.io \
                    -Dsonar.login=$SONAR_LOGIN
    check_if_release:
        executor: java
        steps:
            - attach_workspace_all
            - is_release_to_environment
            - run: 
                command: echo "${IS_RELEASE}"
    
    docker_testing:
        machine: true
        parameters:
            tag:
                type: string
        environment:
            SOURCE_PATH_BACKEND: kwetter_backend
            SOURCE_PATH_FRONTEND: kwetter_angular
        steps:
            - attach_workspace_all
            - end_job_if_not_release
            - version_to_environment
            - docker_build_and_deploy:
                user: "${DOCKER_USER}"
                pass: "${DOCKER_PASS}"
                source_backend: "${SOURCE_PATH_BACKEND}"
                source_frontend: "${SOURCE_PATH_FRONTEND}"
                version: "${KWETTER_VERSION}"
                tag: << parameters.tag >>

    docker_acceptance:
        machine: true
        parameters:
            old-tag:
                type: string
            new-tag:
                type: string
        environment:
            SOURCE_PATH_BACKEND: kwetter_backend
            SOURCE_PATH_FRONTEND: kwetter_angular
        steps:
            - attach_workspace_all
            - end_job_if_not_release
            - version_to_environment
            - docker_rename_and_deploy:
                user: "${DOCKER_USER}"
                pass: "${DOCKER_PASS}"
                source_backend: "${SOURCE_PATH_BACKEND}"
                source_frontend: "${SOURCE_PATH_FRONTEND}"
                version: "${KWETTER_VERSION}"
                old-tag: << parameters.old-tag >>
                new-tag: << parameters.new-tag >>
                
    github:
        executor: go
        steps:
            - end_job_if_not_release
            - attach_workspace_all
            - version_to_environment
            - run:
                name: Create the artifacts folder
                command: mkdir ./artifacts
            - run:
                name: Copy the java binary to artifacts
                command: cd kwetter_backend/target && cp *.jar ../../artifacts
            - run:
                name: Zip and Copy the angular dist to artifacts
                command: cd kwetter_angular/dist && zip -r KwetterAngular.zip . && cp -vr KwetterAngular.zip ../../artifacts
            - run:
                name: "Publish Release on GitHub"
                command: |
                    ghr \
                    -t ${GITHUB_TOKEN} \
                    -u ${CIRCLE_PROJECT_USERNAME} \
                    -r ${CIRCLE_PROJECT_REPONAME} \
                    -c ${CIRCLE_SHA1} \
                    -delete \
                    ${KWETTER_VERSION} \
                    ./artifacts/
